local UiLib = {
	Objects = {};
	Tabs = {};
	Connections = {};
}

function Create(type,props)
	local Inst = Instance.new(type)

	for k,v in next,props do
		if k ~= "Parent" then
			Inst[k] = v
		end
	end

	Inst.Parent = props.Parent

	table.insert(UiLib.Objects,Inst)

	return Inst
end

function Connect(connection)
	assert(typeof(connection) == "RBXScriptConnection",string.format("Expected %q got %q","RBXScriptConnection",typeof(connection)))
	
	table.insert(UiLib.Connections,connection)
	
	return connection
end

local OptionResolver = {
	["Window"] = {"Name"};
	["Tab"] = {"Name","Home"};
	["Section"] = {"Name"};
	["Label"] = {"Name","Callback"};
	["Button"] = {"Name","Callback","Condition"};
	["Toggle"] = {"Name","Enabled","Callback","Mode","HoldTime","Condition"};
	["Slider"] = {"Name","Callback","Min","Max"};
	["KeyBind"] = {"Name","Callback","Key"}
}

function ResolverOFunc(objtype,tab)
	local Option = OptionResolver[objtype]
	
	local NewData = {}
	
	if Option then
		for k,v in next,tab do
			for i = 1,#Option do
				if Option[i] == k then
					NewData[k] = v
				end
			end
		end
	end
	
	return NewData
end

function Tween(object,info,props)
	local NTween = game:GetService("TweenService"):Create(object,info,props)
	NTween:Play()
	task.spawn(function()
		NTween.Completed:Wait()
		NTween:Destroy()
	end)
end

function Draggable(object)
	local main = object
	local drag = false
	local start = UDim2.new(0,0,0,0)
	local startgui = UDim2.new(0,0,0,0)

	main.InputBegan:Connect(function(input)
		if input.UserInputState == Enum.UserInputState.Begin and input.UserInputType == Enum.UserInputType.MouseButton1 then
			drag = true
			start = input.Position
			startgui = main.Position
		end
	end)

	main.InputEnded:Connect(function(input)
		if input.UserInputState == Enum.UserInputState.End and input.UserInputType == Enum.UserInputType.MouseButton1 then
			drag = false
			start = UDim2.new(0,0,0,0)
		end
	end)

	game:GetService("UserInputService").InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement and drag then
			main.Position = UDim2.new(main.Position.X.Scale,(input.Position - start).X+startgui.X.Offset,main.Position.Y.Scale,(input.Position - start).Y+startgui.Y.Offset)
		end
	end)
end

function UiLib:CreateWindow(options)
	options = options and ResolverOFunc("Window",options) or {}
	options.Name = options.Name or "Unnamed"
	local Loaded = false
	
	local WindowMethods = {}
	
	local Window = Create("ScreenGui",{
		Name = options.Name;
		DisplayOrder = 2147483647;
		ZIndexBehavior = Enum.ZIndexBehavior.Global;
	})
	
	local Frame = Create("Frame",{
		AnchorPoint = Vector2.new(0.5,0.5);
		BackgroundColor3 = Color3.fromRGB(40,40,40);
		Position = UDim2.new(0.5,0,0.5,0);
		Size = UDim2.new(0,510,0,314);
		ClipsDescendants = true;
		Parent = Window
	})
	Draggable(Frame)
	
	local UICorner = Create("UICorner",{
		CornerRadius = UDim.new(0,2);
		Parent = Frame
	})
	
	local Line = Create("Frame",{
		BackgroundColor3 = Color3.fromRGB(170,170,170);
		BackgroundTransparency = 0.5;
		BorderSizePixel = 0;
		Position = UDim2.new(0,120,0,43);
		Size = UDim2.new(0,1,1,-43);
		Parent = Frame
	})
	
	local Line2 = Create("Frame",{
		BackgroundColor3 = Color3.fromRGB(170,170,170);
		BackgroundTransparency = 0.5;
		BorderSizePixel = 0;
		Position = UDim2.new(0,0,0,43);
		Size = UDim2.new(1,0,0,1);
		ZIndex = 3;
		Parent = Frame
	})
	
	local Sections = Create("ScrollingFrame",{
		BackgroundTransparency = 1;
		Position = UDim2.new(0,121,0,43);
		Size = UDim2.new(1,-121,1,-43);
		CanvasSize = UDim2.new(0,0,0,0);
		ScrollBarImageColor3 = Color3.fromRGB(144,144,144);
		ScrollBarImageTransparency = 0.5;
		ScrollBarThickness = 3;
		Parent = Frame
	})
	
	local UIListLayout = Create("UIListLayout",{
		Padding = UDim.new(0,15);
		Parent = Sections
	})
	
	local Padding = Create("UIPadding",{
		PaddingBottom = UDim.new(0,5);
		PaddingLeft = UDim.new(0,5);
		PaddingRight = UDim.new(0,5);
		PaddingTop = UDim.new(0,10);
		Parent = Sections
	})
	
	local Tabs = Create("ScrollingFrame",{
		BackgroundTransparency = 0.95;
		Position = UDim2.new(0,0,0,43);
		Size = UDim2.new(0,120,1,-43);
		CanvasSize = UDim2.new(0,0,0,0);
		ScrollBarImageColor3 = Color3.fromRGB(144,144,144);
		ScrollBarImageTransparency = 0.5;
		ScrollBarThickness = 3;
		Parent = Frame
	})

	local UIListLayout2: UIListLayout = Create("UIListLayout",{
		Padding = UDim.new(0,5);
		Parent = Tabs
	})

	local Padding = Create("UIPadding",{
		PaddingBottom = UDim.new(0,5);
		PaddingLeft = UDim.new(0,5);
		PaddingRight = UDim.new(0,5);
		PaddingTop = UDim.new(0,5);
		Parent = Tabs
	})
	
	local Minimize: ImageButton = Create("ImageButton",{
		BackgroundTransparency = 1;
		Position = UDim2.new(1,-40,0,8);
		Size = UDim2.new(0,29,0,27);
		Image = "rbxassetid://387553292";
		ImageColor3 = Color3.fromRGB(255,255,255);
		ScaleType = Enum.ScaleType.Stretch;
		Parent = Frame
	})
	
	local Shadow = Create("ImageLabel",{
		AnchorPoint = Vector2.new(0.5,0.5);
		BackgroundColor3 = Color3.fromRGB(163,163,163);
		BackgroundTransparency = 1;
		Position = UDim2.new(0.5,0,0.5,1);
		Size = UDim2.new(1,18,1,18);
		Image = "rbxassetid://131604217";
		ZIndex = 0;
		ImageTransparency = 0.88;
		ImageColor3 = Color3.fromRGB(0,0,0);
		ScaleType = Enum.ScaleType.Slice;
		SliceCenter = Rect.new(10,10,118,118);
		Parent = Frame
	})
	
	local Title = Create("TextLabel",{
		BackgroundTransparency = 1;
		Position = UDim2.new(0,15,0,0);
		Size = UDim2.new(0,36,0,43);
		Font = Enum.Font.SourceSansLight;
		Text = options.Name;
		TextColor3 = Color3.fromRGB(255,255,255);
		TextSize = 16;
		TextXAlignment = Enum.TextXAlignment.Left;
		Parent = Frame
	})
	
	Connect(UIListLayout2:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		Tabs.CanvasSize = UDim2.new(0,0,0,UIListLayout2.AbsoluteContentSize.Y)
	end))
	
	Connect(UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		Sections.CanvasSize = UDim2.new(0,0,0,UIListLayout.AbsoluteContentSize.Y+13)
	end))
	
	local Opened = false
	Connect(Minimize.MouseButton1Click:Connect(function()
		Opened = not Opened

		if Opened == true then

		else

		end
	end))
	
	--// Window Methods \\--
	function WindowMethods:CreateTab(options)
		options = options and ResolverOFunc("Tab",options) or {}
		options.Name = options.Name or "Unnamed"
		options.Home = options.Home or false
		
		local TabMethods = {}
		
		local Tab:TextButton = Create("TextButton",{
			Name = "";
			BackgroundTransparency = 1;
			Size = UDim2.new(1,0,0,30);
			Font = Enum.Font.SourceSansLight;
			Text = options.Name;
			TextColor3 = Color3.fromRGB(255,255,255);
			TextScaled = true;
			Parent = Tabs
		})
		
		
		local UICorner = Create("UICorner",{
			CornerRadius = UDim.new(0,3);
			Parent = Tab
		})
		
		local UIStroke = Create("UIStroke",{
		  ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
		  Color = Color3.fromRGB(127,127,127);
          Parent = Tab
		})
		
		UiLib.Tabs[Tab] = {}
		
		local function SelectTab()
			for k,v in next,UiLib.Tabs do
				if k ~= Tab then
					Tween(k.UIStroke,TweenInfo.new(0.3,Enum.EasingStyle.Linear,Enum.EasingDirection.Out),{Color = Color3.fromRGB(127,127,127)})
				else
					Tween(UIStroke,TweenInfo.new(0.3,Enum.EasingStyle.Linear,Enum.EasingDirection.Out),{Color = Color3.fromRGB(0, 179, 255)})
				end
				for _,v in next,v do
					if k ~= Tab then
						v.Visible = false
					else
						v.Visible = true
					end
				end
			end
		end
		
		if options.Home == true then
			task.spawn(function()
				repeat task.wait() until Loaded == true
				SelectTab()
			end)
		end
		
		Connect(Tab.MouseButton1Click:Connect(function()
			SelectTab()
		end))
		
		function TabMethods:CreateSection(options)
			options = options and ResolverOFunc("Section",options) or {}
			options.Name = options.Name or "Unnamed"
			local SectionMethods = {}
			
			local Section = Create("Frame",{
				Name = "";
				AutomaticSize = Enum.AutomaticSize.Y;
				BackgroundTransparency = 1;
				Size = UDim2.new(1,0,0,10);
				Visible = false;
				Parent = Sections
			})
			table.insert(UiLib.Tabs[Tab],Section)
			
			local UICorner = Create("UICorner",{
				CornerRadius = UDim.new(0,3);
				Parent = Section
			})

			local UIStroke = Create("UIStroke",{
				ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
				Color = Color3.fromRGB(127,127,127);
				Parent = Section
			})
			
			local Holder = Create("Frame",{
				AutomaticSize = Enum.AutomaticSize.Y;
				BackgroundTransparency = 1;
				Size = UDim2.new(1,0,0,0);
				Position = UDim2.new(0,0,0,5);
				Parent = Section
			})
			
			local UIListLayout = Create("UIListLayout",{
				Padding = UDim.new(0,5);
				Parent = Holder
			})

			local Padding = Create("UIPadding",{
				PaddingBottom = UDim.new(0,5);
				PaddingLeft = UDim.new(0,5);
				PaddingRight = UDim.new(0,5);
				PaddingTop = UDim.new(0,5);
				Parent = Holder
			})
			
			local Title = Create("TextLabel",{
				AutomaticSize = Enum.AutomaticSize.X;
				BackgroundTransparency = 1;
				Position = UDim2.new(0,7,0,-5);
				Size = UDim2.new(0,0,0,6);
				ZIndex = 2;
				Font = Enum.Font.SourceSansLight;
				Text = options.Name;
				TextColor3 = Color3.fromRGB(255,255,255);
				TextSize = 15;
				Parent = Section
			})
			
			local TitleCover = Create("Frame",{
				AutomaticSize = Enum.AutomaticSize.Y;
				BackgroundColor3 = Color3.fromRGB(40,40,40);
				Size = UDim2.new(1,18,1,0);
				BorderSizePixel = 0;
				Parent = Title
			})
			
			function SectionMethods:CreateLabel(options)
				options = options and ResolverOFunc("Label",options) or {}
				options.Name = options.Name or "Unnamed"
				
				local Label = Create("TextLabel",{
					Name = "";
					AutomaticSize = Enum.AutomaticSize.Y;
					BackgroundColor3 = Color3.fromRGB(88,88,88);
					BackgroundTransparency = 0.9;
					Size = UDim2.new(1,0,0,1);
					Font = Enum.Font.SourceSansLight;
					RichText = true;
					Text = options.Name;
					TextColor3 = Color3.fromRGB(255,255,255);
					TextSize = 16;
					TextWrapped = true;
					Parent = Holder
				})
				
				local UICorner = Create("UICorner",{
					CornerRadius = UDim.new(0,3);
					Parent = Label
				})

				local UIStroke = Create("UIStroke",{
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
					Color = Color3.fromRGB(127,127,127);
					Transparency = 0.7;
					Parent = Label
				})
				
				local function Set(text,send)
					if text ~= nil then
						local OldText = Label.Text
						Label.Text = text
						if options.Callback and send ~= false then
							options.Callback(text,OldText)
						end
					end
				end
				
				local Data = {
					Options = options;
					Instance = Label;
					Type = "Text";
					Set = Set;
					RawSet = function(text)
						Set(text,false)
					end,
					Get = function()
						return Label.Text
					end,
				}
				
				return Data
			end
			
			function SectionMethods:CreateButton(options)
				options = options and ResolverOFunc("Button",options) or {}
				options.Name = options.Name or "Unnamed"
				
				if options.Condition == false then
					options.Condition = false
				elseif options.Condition ~= true then
					options.Condition = true
				end
				
				local Button:TextButton = Create("TextButton",{
					Name = "";
					AutomaticSize = Enum.AutomaticSize.Y;
					BackgroundColor3 = Color3.fromRGB(88,88,88);
					BackgroundTransparency = 0.9;
					Size = UDim2.new(1,0,0,20);
					Font = Enum.Font.SourceSansLight;
					RichText = true;
					Text = options.Name;
					TextColor3 = Color3.fromRGB(255,255,255);
					TextSize = 16;
					TextWrapped = true;
					Parent = Holder
				})

				local UICorner = Create("UICorner",{
					CornerRadius = UDim.new(0,3);
					Parent = Button
				})

				local UIStroke = Create("UIStroke",{
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
					Color = Color3.fromRGB(127,127,127);
					Transparency = 0.7;
					Parent = Button
				})
				
				if options.Callback and options.Condition ~= false then
					Connect(Button.MouseButton1Click:Connect(options.Callback))
				end
				
				local function Set(text,send)
					if text ~= nil then
						local OldText = Button.Text
						Button.Text = text
						if options.Callback and send ~= false then
							options.Callback(text,OldText)
						end
					end
				end
					
				local Data = {
					Options = options;
					Instance = Button;
					Type = "Text";
					Set = Set;
					RawSet = function(text)
						Set(text,false)
					end,
					Get = function()
						return Button.Text
					end,
					Activate = options.Callback
				}

				return Data
			end
			
			function SectionMethods:CreateToggle(options)
				options = options and ResolverOFunc("Toggle",options) or {}
				options.Name = options.Name or "Unnamed"
				options.Mode = options.Mode or "Toggle"
				options.HoldTime = options.HoldTime or 0.5
				
				if options.Condition == false then
					options.Condition = false
				elseif options.Condition ~= true then
					options.Condition = true
				end
				
				local Toggled = false
				
				local Toggle:TextButton = Create("TextButton",{
					Name = "";
					BackgroundColor3 = Color3.fromRGB(88,88,88);
					BackgroundTransparency = 0.9;
					Size = UDim2.new(1,0,0,20);
					Font = Enum.Font.SourceSansLight;
					TextColor3 = Color3.fromRGB(255,255,255);
					Text = "";
					TextSize = 16;
					Parent = Holder
				})
				
				local UICorner = Create("UICorner",{
					CornerRadius = UDim.new(0,3);
					Parent = Toggle
				})

				local UIStroke = Create("UIStroke",{
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
					Color = Color3.fromRGB(127,127,127);
					Transparency = 0.7;
					Parent = Toggle
				})
				
				local ButtonBorder = Create("Frame",{
					BackgroundTransparency = 1;
					Position = UDim2.new(1,-30,0.1,0);
					Size = UDim2.new(0,15,0,15);
					Parent = Toggle
				})
				
				local UICorner = Create("UICorner",{
					CornerRadius = UDim.new(0,3);
					Parent = ButtonBorder
				})

				local UIStroke = Create("UIStroke",{
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
					Color = Color3.fromRGB(127,127,127);
					Transparency = 0;
					Parent = ButtonBorder
				})
				
				local Button = Create("Frame",{
					AnchorPoint = Vector2.new(0.5,0.5);
					BackgroundColor3 = Color3.fromRGB(0,116,0);
					Position = UDim2.new(0.5,0,0.5,0);
					Size = UDim2.new(0,0,0,0);
					Parent = ButtonBorder
				})
				
				local UICorner = Create("UICorner",{
					CornerRadius = UDim.new(0,3);
					Parent = Button
				})
				
				
				local Title = Create("TextLabel",{
					BackgroundTransparency = 1;
					Position = UDim2.new(0,15,0,0);
					Size = UDim2.new(0,20,1,0);
					Font = Enum.Font.SourceSansLight;
					TextXAlignment = Enum.TextXAlignment.Left;
					Text = options.Name;
					TextColor3 = Color3.fromRGB(255,255,255);
					TextSize = 16;
					Parent = Toggle
				})
				
				local function Activate()
					if options.Condition ~= false then
					Toggled = not Toggled
					if Toggled == true then
						Tween(Button,TweenInfo.new(0.05,Enum.EasingStyle.Linear),{Size = UDim2.new(1,-2,1,-2)})
					else
						Tween(Button,TweenInfo.new(0.05,Enum.EasingStyle.Linear),{Size = UDim2.new(0,0,0,0)})
					end
					
					if options.Callback then
						options.Callback(Toggled)
						end
					end	
				end
				
				local Held = false
				local TimeHeld = 0
				local ButtonTween
				
				Connect(Toggle.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						if options.Mode ~= "Hold" then
							Activate()
						elseif options.Mode == "Hold" and Toggled == true then
							Activate()
						elseif options.Mode == "Hold" and Toggled == false and options.Condition ~= false then
							Held = true
							ButtonTween = game:GetService("TweenService"):Create(Button,TweenInfo.new(options.HoldTime,Enum.EasingStyle.Linear),{Size = UDim2.new(1,-2,1,-2)})
							ButtonTween:Play()
							task.spawn(function()
								repeat
									wait(0.1)
									TimeHeld += 0.1
								until Held == false or TimeHeld >= options.HoldTime
								if TimeHeld >= options.HoldTime then
									Toggled = true
									TimeHeld = 0
									if options.Callback then
										options.Callback(Toggled)
									end
								elseif TimeHeld < options.HoldTime then
									TimeHeld = 0
								end
							end)
						end
					end
				end))
				
				Connect(Toggle.InputEnded:Connect(function()
					Held = false
					if TimeHeld < options.HoldTime and Toggled == false then
						Tween(Button,TweenInfo.new(0.05,Enum.EasingStyle.Linear),{Size = UDim2.new()})
						pcall(function()
							ButtonTween:Destroy()
						end)
					end
					TimeHeld = 0
				end))
				
				local function Set(con)
					options.Condition = con
				end
				
				local Data = {
					Options = options;
					Instance = Toggle;
					Type = "Condition";
					Set = Set;
					Get = function()
						return Toggled
					end,
					Activate = Activate
				}
				
				return Data
			end
			
			function SectionMethods:CreateSlider(options)
				options = options and ResolverOFunc("Slider",options) or {}
				options.Name = options.Name or "Unnamed"
				options.Min = options.Min or 0
				options.Max = options.Max or 100
				
				local Slider = Create("Frame",{
					Name = "";
					BackgroundColor3 = Color3.fromRGB(88,88,88);
					BackgroundTransparency = 0.9;
					Size = UDim2.new(1,0,0,20);
					Parent = Holder
				})
				
				local UICorner = Create("UICorner",{
					CornerRadius = UDim.new(0,3);
					Parent = Slider
				})

				local UIStroke = Create("UIStroke",{
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
					Color = Color3.fromRGB(127,127,127);
					Transparency = 0.7;
					Parent = Slider
				})
				
				local SliderBorder = Create("TextButton",{
					BackgroundTransparency = 1;
					Position = UDim2.new(1,-230,0.1,0);
					Size = UDim2.new(0,214,0,15);
					Parent = Slider; 
					Text = ""
				})
				
				local UICorner = Create("UICorner",{
					CornerRadius = UDim.new(0,3);
					Parent = SliderBorder
				})

				local UIStroke = Create("UIStroke",{
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
					Color = Color3.fromRGB(127,127,127);
					Transparency = 0;
					Parent = SliderBorder
				})
				
				local SliderInside = Create("Frame",{
					BackgroundColor3 = Color3.fromRGB(67,67,67);
					Position = UDim2.new(0,1,0,1);
					Size = UDim2.new(0,-2,1,-2);
					Parent = SliderBorder
				})
				
				local ValueLabel = Create("TextLabel",{
					BackgroundTransparency = 1;
					Size = UDim2.new(1,0,1,0);
					Font = Enum.Font.SourceSansLight;
					Text = "0";
					TextColor3 = Color3.fromRGB(255,255,255);
					TextSize = 16;
				    Parent = SliderBorder
				})
				
				local UICorner = Create("UICorner",{
					CornerRadius = UDim.new(0,3);
					Parent = SliderInside
				})
				
				local Title = Create("TextLabel",{
					BackgroundTransparency = 1;
					Position = UDim2.new(0,15,0,0);
					Size = UDim2.new(0,20,1,0);
					Font = Enum.Font.SourceSansLight;
					TextXAlignment = Enum.TextXAlignment.Left;
					Text = options.Name;
					TextColor3 = Color3.fromRGB(255,255,255);
					TextSize = 16;
					Parent = Slider
				})
				
				local Listening = false

				SliderBorder.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						Listening = true
					end
				end)

				SliderBorder.InputEnded:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						Listening = false
					end
				end)

				game:GetService("UserInputService").InputChanged:Connect(function(input)
					if Listening == true then
						if input.UserInputType == Enum.UserInputType.MouseMovement then
							local BarStart = SliderBorder.AbsolutePosition
							local MousePos = input.Position
							local Difference = MousePos.X - BarStart.X
							local Percent = Difference / (SliderBorder.AbsoluteSize.X)
							Percent = math.clamp(Percent, options.Min/options.Max, 1)

							local Value = math.round(Percent*options.Max)

							SliderInside.Size = UDim2.new(Percent,-2,1,-2)
							
							ValueLabel.Text = tostring(Value)

							if options.Callback then
								options.Callback(Value)
							end
						end
					end
				end)
				
				local function Set(res)
					res.Min = res.Min or options.Min
					res.Max = res.Max or options.Max
					
					options.Min = res.Min
					options.Max = res.Max
				end
				
				local Data = {
					Options = options;
					Instance = Slider;
					Type = "Restraints";
					Set = Set;
					Get = function()
						return {options.Min,options.Max}
					end,
				}
				
				return Data
			end
			
			function SectionMethods:CreateKeyBind(options)
				options.Name = options.Name or "Unnamed"
				options.Bind = options.Bind or Enum.KeyCode.Unknown
				options.BindName = (tostring(options.Bind)):split(".")[3]
				
				local KeyBind = Create("TextButton",{
					Name = "";
					BackgroundColor3 = Color3.fromRGB(88,88,88);
					BackgroundTransparency = 0.9;
					Size = UDim2.new(1,0,0,20);
					Parent = Holder;
					Text = ""
				})

				local UICorner = Create("UICorner",{
					CornerRadius = UDim.new(0,3);
					Parent = KeyBind
				})

				local UIStroke = Create("UIStroke",{
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
					Color = Color3.fromRGB(127,127,127);
					Transparency = 0.7;
					Parent = KeyBind
				})

				local BindBorder:TextButton = Create("TextLabel",{
					BackgroundTransparency = 1;
					Position = UDim2.new(0.48,0,0.1,0);
					Size = UDim2.new(0,15,0,15);
					TextSize = 16;
					TextColor3 = Color3.fromRGB(255,255,255);
					Font = Enum.Font.SourceSansLight;
					Text = options.BindName;
					Parent = KeyBind;
				})
				
				Connect(BindBorder:GetPropertyChangedSignal("TextBounds"):Connect(function()
					BindBorder.Size = UDim2.new(0,BindBorder.TextBounds.X+15,0,15)
				end))
				
				local UICorner = Create("UICorner",{
					CornerRadius = UDim.new(0,3);
					Parent = BindBorder
				})

				local UIStroke = Create("UIStroke",{
					ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
					Color = Color3.fromRGB(127,127,127);
					Transparency = 0;
					Parent = BindBorder
				})

				local Title = Create("TextLabel",{
					BackgroundTransparency = 1;
					Position = UDim2.new(0,15,0,0);
					Size = UDim2.new(0,20,1,0);
					Font = Enum.Font.SourceSansLight;
					Text = options.Name;
					TextXAlignment = Enum.TextXAlignment.Left;
					TextColor3 = Color3.fromRGB(255,255,255);
					TextSize = 16;
					Parent = KeyBind
				})
				
				local Switch = false
				
				local function Set(k)
					options.Bind = k
					local Name = (tostring(k)):split(".")[3]
					options.BindName = Name
					BindBorder.Text = Name
					Switch =  false
				end
				
				game:GetService("UserInputService").InputBegan:Connect(function(input)
					local Input = Enum.KeyCode.Unknown
					if input.KeyCode == Enum.KeyCode.Unknown then
						Input = input.UserInputType
					else
						Input = input.KeyCode
					end
					
					if Switch == true then
						Set(Input)
					end
					
					if input.KeyCode == options.Bind or input.UserInputType == options.Bind then
						if options.Callback then
							options.Callback(true)
						end
					end
				end)
				
				game:GetService("UserInputService").InputEnded:Connect(function(input)
					if input.KeyCode == options.Bind or input.UserInputType == options.Bind then
						if options.Callback then
							options.Callback(false)
						end
					end
				end)
				
				KeyBind.MouseButton1Click:Connect(function()
					Switch = true
					options.Bind = Enum.KeyCode.Unknown
					BindBorder.Text = "..."
				end)
				
				
				local Data = {
					Options = options;
					Instance = KeyBind;
					Type = "KeyBind";
					Set = Set;
					Get = function()
						return options.BindName
					end,
				}
				
				return Data
			end
			
			return SectionMethods
		end
		
		return TabMethods
	end

	
	function WindowMethods:Load()
		Window.Parent = game:GetService("Players").LocalPlayer.PlayerGui
		Loaded = true
	end
	
	return WindowMethods
end

return UiLib
